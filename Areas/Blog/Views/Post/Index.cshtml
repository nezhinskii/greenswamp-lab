@model greenswamp.Areas.Blog.ViewModels.FeedViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Post - Greenswamp</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        swamp: {
                            50: '#f0fdf4',
                            100: '#dcfce7',
                            200: '#bbf7d0',
                            300: '#86efac',
                            400: '#4ade80',
                            500: '#22c55e',
                            600: '#16a34a',
                            700: '#15803d',
                            800: '#166534',
                            900: '#14532d',
                        }
                    }
                }
            }
        }
    </script>
</head>
<body class="bg-swamp-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-0 lg:divide-x sm:divide-y lg:h-[calc(100vh-4rem)]">
            <!-- Left Sidebar -->
            <div class="lg:col-span-1 bg-white">         
                @await Html.PartialAsync("_LeftSidebar", Model.CurrentUser)
            </div>

            <!-- Main Feed -->
            <div id = "postContainer" class="lg:col-span-2 divide-y bg-white">
                @await Html.PartialAsync("_PostList", Model.Posts, new ViewDataDictionary(ViewData) { { "IsFullView", true }, { "CurrentUser", Model.CurrentUser } })
            </div>

            <!-- Right Sidebar -->
            <div class="lg:col-span-1 bg-white invisible lg:visible">
                <div class="p-6 pb-0">
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="w-5 h-5 text-swamp-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                            </svg>
                        </div>
                        <input type="text" placeholder="Search" class="w-full pl-10 pr-4 py-2 bg-swamp-100 dark:bg-swamp-900 rounded-full border-none focus:ring-2 focus:ring-swamp-400 focus-visible:ring-swamp-400 placeholder:text-swamp-400">
                    </div>
                </div>
                @await Html.PartialAsync("_TrendingPonds", Model.TrendingPonds)
                @await Html.PartialAsync("_UpcomingEvents", Model.UpcomingEvents)
                <div class="p-6">
                    <div class="flex items-start space-x-2 text-swamp-600">
                        <a href="/contact" class="hover:text-swamp-800">Contact</a>
                        <span>•</span>
                        <a href="/privacy" class="hover:text-swamp-800">Privacy</a>
                        <span>•</span>
                        <a href="/tos" class="hover:text-swamp-800">Terms</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @await Html.PartialAsync("_PostModal")

    <script>
        function openPostModal() {
            document.getElementById('postModal').classList.remove('hidden');
        }

        function closePostModal() {
            document.getElementById('postModal').classList.add('hidden');
            document.getElementById('postContent').value = '';
        }

        async function submitComment(event, postId) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            formData.append('postId', postId);

            try {
                const response = await fetch('/api/Blog/PostsApi/comment', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    alert(errorData.error || 'Failed to post comment');
                    return;
                }

                form.reset();

                const htmlResponse = await fetch(`/Blog/Posts/GetFullPostHtml/${postId}`);
                if (!htmlResponse.ok) {
                    alert('Failed to refresh post');
                    return;
                }

                const html = await htmlResponse.text();
                const postContainer = document.getElementById('postContainer');
                postContainer.innerHTML = html;
            } catch (error) {
                console.error('Error submitting comment:', error);
                alert('An error occurred while posting the comment');
            }
        }
    </script>
</body>
</html>