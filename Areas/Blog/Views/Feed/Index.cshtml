@model greenswamp.Areas.Blog.ViewModels.FeedViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@(Model.Tag != null ? $"Posts tagged with #{Model.Tag}" : "Greenswamp Feed")</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        swamp: {
                            50: '#f0fdf4',
                            100: '#dcfce7',
                            200: '#bbf7d0',
                            300: '#86efac',
                            400: '#4ade80',
                            500: '#22c55e',
                            600: '#16a34a',
                            700: '#15803d',
                            800: '#166534',
                            900: '#14532d',
                        }
                    }
                }
            }
        }
    </script>
</head>
<body class="bg-swamp-50">

    <!-- Main Feed Container -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!--<div class="grid grid-cols-1 lg:grid-cols-4 gap-8">-->
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-0 lg:divide-x sm:divide-y lg:h-[calc(100vb-4rem)]">
            <!-- Left Sidebar -->
            <div class="lg:col-span-1 bg-white order-1">         
                @await Html.PartialAsync("_LeftSidebar", Model.CurrentUser)
            </div>

            <!-- Main Feed -->
            <div class="lg:col-span-2 divide-y order-3", id="post-list">
                @await Html.PartialAsync("_PostList", Model.Posts)
                <div id="loading" class="text-center py-4 hidden">
                    <span>Loading more posts...</span>
                </div>
            </div>

            <!-- Right Sidebar -->
            <div class="lg:col-span-1 bg-white sm:order-2 order-4 lg:order-4">
                <!-- Search-->
                <div class="p-6 pb-0">
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="w-5 h-5 text-swamp-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                            </svg>
                        </div>
                        <input 
                            type="text" 
                            placeholder="Search" 
                            class="w-full pl-10 pr-4 py-2 bg-swamp-100 rounded-full border-none focus:ring-2 
                            focus:ring-swamp-400 focus-visible:ring-swamp-400 placeholder:text-swamp-600"
                        >
                    </div>
                </div>
                <!-- Trending Ponds -->
                @await Html.PartialAsync("_TrendingPonds", Model.TrendingPonds)

                <!-- Upcoming Events -->
                @await Html.PartialAsync("_UpcomingEvents", Model.UpcomingEvents)


                <div class="p-6">                  
                    <div class="flex items-start space-x-2 text-swamp-600">
                        <a href="/contact" class="hover:text-swamp-800">Contact</a>
                        <span>•</span>
                        <a href="/privacy" class="hover:text-swamp-800">Privacy</a>
                        <span>•</span>
                        <a href="/tos" class="hover:text-swamp-800">Terms</a>
                    </div>
                </div>
                </div>
            </div>
        </div>
    </div>

    @await Html.PartialAsync("_PostModal")

    <script>
        let page = 1;
        let isLoading = false;

        const onScroll = () => {
            if (isLoading) return;

            const postList = document.getElementById('post-list');
            const loading = document.getElementById('loading');
            const threshold = 100

            if (window.innerHeight + window.scrollY >= postList.offsetHeight + postList.offsetTop - threshold) {
                isLoading = true;
                loading.classList.remove('hidden');

                page++;
                const tag = '@Model.Tag';
                fetch(`/Blog/Feed/LoadMorePosts?page=${page}&tag=${encodeURIComponent(tag)}`)
                    .then(response => response.text())
                    .then(html => {
                        postList.insertAdjacentHTML('beforeend', html);
                        isLoading = false;
                        loading.classList.add('hidden');

                        if (html.trim() === '') {
                            window.removeEventListener('scroll', onScroll);
                        }
                    });
            }
        };

        window.addEventListener('scroll', onScroll);

        window.onPostCreated = async function (postData) {
            const postList = document.getElementById('post-list');
            if (!postList) return;

            try {
                const response = await fetch(`/Blog/Posts/GetPostHtml/${postData.postId}`);
                if (!response.ok) {
                    console.error('Failed to fetch post HTML');
                    return;
                }

                const html = await response.text();
                if (html.trim()) {
                    postList.insertAdjacentHTML('afterbegin', html);
                }
            } catch (error) {
                console.error('Error fetching post HTML:', error);
            }
        };
    </script>
</body>
</html>
